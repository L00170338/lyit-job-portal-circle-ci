# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  vmImage: ubuntu-latest
strategy:
  matrix:
#    Python35:
#      PYTHON_VERSION: '3.5'
#    Python36:
#      PYTHON_VERSION: '3.6'
    Python38:
      PYTHON_VERSION: '3.8'
  maxParallel: 3

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(PYTHON_VERSION)'
    architecture: 'x64'

- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `manage.py`."""
      from glob import iglob
      from os import path
      # Python >= 3.5
      manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
      if not manage_py:
          raise SystemExit('Could not find a Django project')
      project_location = path.dirname(path.abspath(manage_py))
      print('Found Django project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

- script: |
    python -m pip install --upgrade pip setuptools wheel
    pip install -r requirements.txt
    pip install unittest-xml-reporting
  displayName: 'Install prerequisites'

- script: |
    python manage.py migrate
  displayName: 'Building Applicattion'


- script: |
    python manage.py test --settings=jobs.settings -v3
  displayName: 'Running Unit tests'
  
- script: |
    pushd '$(projectRoot)'
    python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
  displayName: 'Running Pytest'

- script: |
    flake8 --max-line-length=150 --ignore=E266,E501,E712,F811 *.py
  displayName: 'Running Lint  tests'

- script: |
    sudo apt update -y
    sudo apt install -y ruby-dev git 
    sudo gem install dpl
    dpl --provider=heroku --app=lyit-job-portal --api-key=($heroku_api_key) --skip-cleanup
  displayName: 'Deploy Staging Web Application'

- script: |
    npm install newman
    newman --version
    newman run ./tests/LYIT-JOB-PORTAL.postman_collection.json -e ./tests/LYIT-JOB-PORTAL.postman_collection.json
  displayName: 'UI/API Staging Tests'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: "**/TEST-*.xml"
    testRunTitle: 'Python $(PYTHON_VERSION)'
  condition: succeededOrFailed()
